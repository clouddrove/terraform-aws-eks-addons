[0m[1mmodule.vpc_cni_irsa.data.aws_region.current: Reading...[0m[0m
[0m[1mdata.aws_availability_zones.available: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.vpc_cni_irsa.data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.vpc_cni_irsa.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.vpc_cni_irsa.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.vpc_cni_irsa.data.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mmodule.eks.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["critical"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["application"].data.aws_caller_identity.current: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["application"].data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["critical"].data.aws_partition.current: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["application"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.eks.module.eks_managed_node_group["critical"].data.aws_partition.current: Read complete after 0s [id=aws][0m
[0m[1mmodule.vpc_cni_irsa.data.aws_iam_policy_document.vpc_cni[0]: Reading...[0m[0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.vpc_cni_irsa.data.aws_iam_policy_document.vpc_cni[0]: Read complete after 0s [id=572553129][0m
[0m[1mmodule.eks.data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=1530481229][0m
[0m[1mmodule.eks.data.aws_caller_identity.current: Read complete after 0s [id=924144197303][0m
[0m[1mmodule.eks.data.aws_iam_session_context.current: Reading...[0m[0m
[0m[1mmodule.eks.module.kms.data.aws_caller_identity.current: Read complete after 0s [id=924144197303][0m
[0m[1mmodule.vpc_cni_irsa.data.aws_caller_identity.current: Read complete after 0s [id=924144197303][0m
[0m[1mmodule.eks.module.eks_managed_node_group["application"].data.aws_caller_identity.current: Read complete after 1s [id=924144197303][0m
[0m[1mmodule.eks.module.eks_managed_node_group["critical"].data.aws_caller_identity.current: Read complete after 1s [id=924144197303][0m
[0m[1mdata.aws_availability_zones.available: Read complete after 1s [id=us-east-1][0m
[0m[1mmodule.eks.data.aws_iam_session_context.current: Read complete after 1s [id=arn:aws:sts::924144197303:assumed-role/AWSReservedSSO_AdministratorAccess_3b5b668e6e5741c8/nilesh.gadgi@clouddrove.com][0m
[0m[1mmodule.eks.module.eks_managed_node_group["critical"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["application"].data.aws_iam_policy_document.assume_role_policy[0]: Reading...[0m[0m
[0m[1mmodule.eks.module.eks_managed_node_group["critical"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=1734879000][0m
[0m[1mmodule.eks.module.eks_managed_node_group["application"].data.aws_iam_policy_document.assume_role_policy[0]: Read complete after 0s [id=1734879000][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m
 [36m<=[0m read (data resources)[0m

Terraform will perform the following actions:

[1m  # data.aws_eks_cluster.eks_cluster[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_cluster" "eks_cluster" {
      [32m+[0m[0m access_config             = (known after apply)
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m certificate_authority     = (known after apply)
      [32m+[0m[0m cluster_id                = (known after apply)
      [32m+[0m[0m created_at                = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types = (known after apply)
      [32m+[0m[0m endpoint                  = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m identity                  = (known after apply)
      [32m+[0m[0m kubernetes_network_config = (known after apply)
      [32m+[0m[0m name                      = "helm-addons-cluster"
      [32m+[0m[0m outpost_config            = (known after apply)
      [32m+[0m[0m platform_version          = (known after apply)
      [32m+[0m[0m role_arn                  = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m tags                      = (known after apply)
      [32m+[0m[0m version                   = (known after apply)
      [32m+[0m[0m vpc_config                = (known after apply)
    }

[1m  # data.aws_eks_cluster_auth.eks_cluster[0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_eks_cluster_auth" "eks_cluster" {
      [32m+[0m[0m id    = (known after apply)
      [32m+[0m[0m name  = (known after apply)
      [32m+[0m[0m token = (sensitive value)
    }

[1m  # aws_iam_policy.node_additional[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "node_additional" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m description = "Example usage of node additional policy"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "helm-addons-additional"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:Describe*",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags        = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all    = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
    }

[1m  # module.addons.data.aws_caller_identity.current[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_caller_identity" "current" {
      [32m+[0m[0m account_id = (known after apply)
      [32m+[0m[0m arn        = (known after apply)
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m user_id    = (known after apply)
    }

[1m  # module.addons.data.aws_eks_cluster.eks_cluster[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_cluster" "eks_cluster" {
      [32m+[0m[0m access_config             = (known after apply)
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m certificate_authority     = (known after apply)
      [32m+[0m[0m cluster_id                = (known after apply)
      [32m+[0m[0m created_at                = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types = (known after apply)
      [32m+[0m[0m endpoint                  = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m identity                  = (known after apply)
      [32m+[0m[0m kubernetes_network_config = (known after apply)
      [32m+[0m[0m name                      = "helm-addons-cluster"
      [32m+[0m[0m outpost_config            = (known after apply)
      [32m+[0m[0m platform_version          = (known after apply)
      [32m+[0m[0m role_arn                  = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m tags                      = (known after apply)
      [32m+[0m[0m version                   = (known after apply)
      [32m+[0m[0m vpc_config                = (known after apply)
    }

[1m  # module.addons.data.aws_partition.current[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_partition" "current" {
      [32m+[0m[0m dns_suffix         = (known after apply)
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m partition          = (known after apply)
      [32m+[0m[0m reverse_dns_prefix = (known after apply)
    }

[1m  # module.addons.data.aws_region.current[0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_region" "current" {
      [32m+[0m[0m description = (known after apply)
      [32m+[0m[0m endpoint    = (known after apply)
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = (known after apply)
    }

[1m  # module.addons.time_sleep.dataplane[0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "dataplane" {
      [32m+[0m[0m create_duration = "10s"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m triggers        = {
          [32m+[0m[0m "data_plane_wait_arn" = ""
          [32m+[0m[0m "eks_cluster_id"      = (known after apply)
        }
    }

[1m  # module.eks.data.aws_eks_addon_version.this["vpc-cni"][0m will be read during apply
  # (depends on a resource or a module with changes pending)
[0m [36m<=[0m[0m data "aws_eks_addon_version" "this" {
      [32m+[0m[0m addon_name         = "vpc-cni"
      [32m+[0m[0m id                 = (known after apply)
      [32m+[0m[0m kubernetes_version = "1.29"
      [32m+[0m[0m most_recent        = true
      [32m+[0m[0m version            = (known after apply)
    }

[1m  # module.eks.data.tls_certificate.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "tls_certificate" "this" {
      [32m+[0m[0m certificates = (known after apply)
      [32m+[0m[0m id           = (known after apply)
      [32m+[0m[0m url          = (known after apply)
    }

[1m  # module.eks.aws_cloudwatch_log_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_log_group" "this" {
      [32m+[0m[0m arn               = (known after apply)
      [32m+[0m[0m id                = (known after apply)
      [32m+[0m[0m log_group_class   = (known after apply)
      [32m+[0m[0m name              = "/aws/eks/helm-addons-cluster/cluster"
      [32m+[0m[0m name_prefix       = (known after apply)
      [32m+[0m[0m retention_in_days = 90
      [32m+[0m[0m skip_destroy      = false
      [32m+[0m[0m tags              = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "/aws/eks/helm-addons-cluster/cluster"
        }
      [32m+[0m[0m tags_all          = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "/aws/eks/helm-addons-cluster/cluster"
        }
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["Environment"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "Environment"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "test"
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["GithubOrg"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "GithubOrg"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "clouddrove"
    }

[1m  # module.eks.aws_ec2_tag.cluster_primary_security_group["GithubRepo"][0m will be created
[0m  [32m+[0m[0m resource "aws_ec2_tag" "cluster_primary_security_group" {
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m key         = "GithubRepo"
      [32m+[0m[0m resource_id = (known after apply)
      [32m+[0m[0m value       = "terraform-helm-eks-addons"
    }

[1m  # module.eks.aws_eks_addon.before_compute["vpc-cni"][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_addon" "before_compute" {
      [32m+[0m[0m addon_name           = "vpc-cni"
      [32m+[0m[0m addon_version        = (known after apply)
      [32m+[0m[0m arn                  = (known after apply)
      [32m+[0m[0m cluster_name         = "helm-addons-cluster"
      [32m+[0m[0m configuration_values = jsonencode(
            {
              [32m+[0m[0m env = {
                  [32m+[0m[0m ENABLE_PREFIX_DELEGATION = "true"
                  [32m+[0m[0m WARM_PREFIX_TARGET       = "1"
                }
            }
        )
      [32m+[0m[0m created_at           = (known after apply)
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m modified_at          = (known after apply)
      [32m+[0m[0m resolve_conflicts    = "OVERWRITE"
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }

      [32m+[0m[0m timeouts {}
    }

[1m  # module.eks.aws_eks_cluster.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_cluster" "this" {
      [32m+[0m[0m arn                       = (known after apply)
      [32m+[0m[0m certificate_authority     = (known after apply)
      [32m+[0m[0m cluster_id                = (known after apply)
      [32m+[0m[0m created_at                = (known after apply)
      [32m+[0m[0m enabled_cluster_log_types = [
          [32m+[0m[0m "api",
          [32m+[0m[0m "audit",
          [32m+[0m[0m "authenticator",
        ]
      [32m+[0m[0m endpoint                  = (known after apply)
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m identity                  = (known after apply)
      [32m+[0m[0m name                      = "helm-addons-cluster"
      [32m+[0m[0m platform_version          = (known after apply)
      [32m+[0m[0m role_arn                  = (known after apply)
      [32m+[0m[0m status                    = (known after apply)
      [32m+[0m[0m tags                      = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all                  = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m version                   = "1.29"

      [32m+[0m[0m encryption_config {
          [32m+[0m[0m resources = [
              [32m+[0m[0m "secrets",
            ]

          [32m+[0m[0m provider {
              [32m+[0m[0m key_arn = (known after apply)
            }
        }

      [32m+[0m[0m kubernetes_network_config {
          [32m+[0m[0m ip_family         = "ipv4"
          [32m+[0m[0m service_ipv4_cidr = (known after apply)
          [32m+[0m[0m service_ipv6_cidr = (known after apply)
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m vpc_config {
          [32m+[0m[0m cluster_security_group_id = (known after apply)
          [32m+[0m[0m endpoint_private_access   = true
          [32m+[0m[0m endpoint_public_access    = true
          [32m+[0m[0m public_access_cidrs       = [
              [32m+[0m[0m "0.0.0.0/0",
            ]
          [32m+[0m[0m security_group_ids        = (known after apply)
          [32m+[0m[0m subnet_ids                = (known after apply)
          [32m+[0m[0m vpc_id                    = (known after apply)
        }
    }

[1m  # module.eks.aws_iam_openid_connect_provider.oidc_provider[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_openid_connect_provider" "oidc_provider" {
      [32m+[0m[0m arn             = (known after apply)
      [32m+[0m[0m client_id_list  = [
          [32m+[0m[0m "sts.amazonaws.com",
        ]
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m tags            = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all        = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m thumbprint_list = (known after apply)
      [32m+[0m[0m url             = (known after apply)
    }

[1m  # module.eks.aws_iam_policy.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "cluster_encryption" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m description = "Cluster encryption policy to allow cluster role to utilize CMK provided"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = (known after apply)
      [32m+[0m[0m name_prefix = "helm-addons-cluster-cluster-ClusterEncryption"
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = (known after apply)
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags        = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all    = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
    }

[1m  # module.eks.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "eks.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSClusterAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "helm-addons-cluster-cluster-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy {
          [32m+[0m[0m name   = "helm-addons-cluster-cluster"
          [32m+[0m[0m policy = jsonencode(
                {
                  [32m+[0m[0m Statement = [
                      [32m+[0m[0m {
                          [32m+[0m[0m Action   = [
                              [32m+[0m[0m "logs:CreateLogGroup",
                            ]
                          [32m+[0m[0m Effect   = "Deny"
                          [32m+[0m[0m Resource = "*"
                        },
                    ]
                  [32m+[0m[0m Version   = "2012-10-17"
                }
            )
        }
    }

[1m  # module.eks.aws_iam_role_policy_attachment.cluster_encryption[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "cluster_encryption" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSClusterPolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_iam_role_policy_attachment.this["AmazonEKSVPCResourceController"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.aws_security_group.cluster[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "cluster" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS cluster security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "helm-addons-cluster-cluster-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons-cluster-cluster"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons-cluster-cluster"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.eks.aws_security_group.node[0][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group" "node" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = "EKS node shared security group"
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = "helm-addons-cluster-node-"
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment"                               = "test"
          [32m+[0m[0m "GithubOrg"                                 = "clouddrove"
          [32m+[0m[0m "GithubRepo"                                = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                                      = "helm-addons-cluster-node"
          [32m+[0m[0m "kubernetes.io/cluster/helm-addons-cluster" = "owned"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment"                               = "test"
          [32m+[0m[0m "GithubOrg"                                 = "clouddrove"
          [32m+[0m[0m "GithubRepo"                                = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                                      = "helm-addons-cluster-node"
          [32m+[0m[0m "kubernetes.io/cluster/helm-addons-cluster" = "owned"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.eks.aws_security_group_rule.cluster["ingress_nodes_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "cluster" {
      [32m+[0m[0m description              = "Node groups to cluster API"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["egress_all"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m cidr_blocks              = [
          [32m+[0m[0m "0.0.0.0/0",
        ]
      [32m+[0m[0m description              = "Allow all egress"
      [32m+[0m[0m from_port                = 0
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "-1"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 0
      [32m+[0m[0m type                     = "egress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_443"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node groups"
      [32m+[0m[0m from_port                = 443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_4443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 4443/tcp webhook"
      [32m+[0m[0m from_port                = 4443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 4443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_6443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 6443/tcp webhook"
      [32m+[0m[0m from_port                = 6443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 6443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_8443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 8443/tcp webhook"
      [32m+[0m[0m from_port                = 8443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 8443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_9443_webhook"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node 9443/tcp webhook"
      [32m+[0m[0m from_port                = 9443
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 9443
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_cluster_kubelet"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Cluster API to node kubelets"
      [32m+[0m[0m from_port                = 10250
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = false
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 10250
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_nodes_ephemeral"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node ingress on ephemeral ports"
      [32m+[0m[0m from_port                = 1025
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 65535
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_tcp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "tcp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.aws_security_group_rule.node["ingress_self_coredns_udp"][0m will be created
[0m  [32m+[0m[0m resource "aws_security_group_rule" "node" {
      [32m+[0m[0m description              = "Node to node CoreDNS UDP"
      [32m+[0m[0m from_port                = 53
      [32m+[0m[0m id                       = (known after apply)
      [32m+[0m[0m prefix_list_ids          = []
      [32m+[0m[0m protocol                 = "udp"
      [32m+[0m[0m security_group_id        = (known after apply)
      [32m+[0m[0m security_group_rule_id   = (known after apply)
      [32m+[0m[0m self                     = true
      [32m+[0m[0m source_security_group_id = (known after apply)
      [32m+[0m[0m to_port                  = 53
      [32m+[0m[0m type                     = "ingress"
    }

[1m  # module.eks.time_sleep.this[0][0m will be created
[0m  [32m+[0m[0m resource "time_sleep" "this" {
      [32m+[0m[0m create_duration = "30s"
      [32m+[0m[0m id              = (known after apply)
      [32m+[0m[0m triggers        = {
          [32m+[0m[0m "cluster_certificate_authority_data" = (known after apply)
          [32m+[0m[0m "cluster_endpoint"                   = (known after apply)
          [32m+[0m[0m "cluster_name"                       = "helm-addons-cluster"
          [32m+[0m[0m "cluster_version"                    = "1.29"
        }
    }

[1m  # module.vpc.aws_default_network_acl.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_default_network_acl" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_network_acl_id = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)

      [32m+[0m[0m egress {
          [32m+[0m[0m action          = "allow"
          [32m+[0m[0m from_port       = 0
          [32m+[0m[0m ipv6_cidr_block = "::/0"
          [32m+[0m[0m protocol        = "-1"
          [32m+[0m[0m rule_no         = 101
          [32m+[0m[0m to_port         = 0
        }
      [32m+[0m[0m egress {
          [32m+[0m[0m action     = "allow"
          [32m+[0m[0m cidr_block = "0.0.0.0/0"
          [32m+[0m[0m from_port  = 0
          [32m+[0m[0m protocol   = "-1"
          [32m+[0m[0m rule_no    = 100
          [32m+[0m[0m to_port    = 0
        }

      [32m+[0m[0m ingress {
          [32m+[0m[0m action          = "allow"
          [32m+[0m[0m from_port       = 0
          [32m+[0m[0m ipv6_cidr_block = "::/0"
          [32m+[0m[0m protocol        = "-1"
          [32m+[0m[0m rule_no         = 101
          [32m+[0m[0m to_port         = 0
        }
      [32m+[0m[0m ingress {
          [32m+[0m[0m action     = "allow"
          [32m+[0m[0m cidr_block = "0.0.0.0/0"
          [32m+[0m[0m from_port  = 0
          [32m+[0m[0m protocol   = "-1"
          [32m+[0m[0m rule_no    = 100
          [32m+[0m[0m to_port    = 0
        }
    }

[1m  # module.vpc.aws_default_route_table.default[0][0m will be created
[0m  [32m+[0m[0m resource "aws_default_route_table" "default" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m default_route_table_id = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m route                  = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
          [32m+[0m[0m update = "5m"
        }
    }

[1m  # module.vpc.aws_default_security_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_default_security_group" "this" {
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m description            = (known after apply)
      [32m+[0m[0m egress                 = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m ingress                = (known after apply)
      [32m+[0m[0m name                   = (known after apply)
      [32m+[0m[0m name_prefix            = (known after apply)
      [32m+[0m[0m owner_id               = (known after apply)
      [32m+[0m[0m revoke_rules_on_delete = false
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m vpc_id                 = (known after apply)
    }

[1m  # module.vpc.aws_eip.nat[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eip" "nat" {
      [32m+[0m[0m allocation_id        = (known after apply)
      [32m+[0m[0m association_id       = (known after apply)
      [32m+[0m[0m carrier_ip           = (known after apply)
      [32m+[0m[0m customer_owned_ip    = (known after apply)
      [32m+[0m[0m domain               = "vpc"
      [32m+[0m[0m id                   = (known after apply)
      [32m+[0m[0m instance             = (known after apply)
      [32m+[0m[0m network_border_group = (known after apply)
      [32m+[0m[0m network_interface    = (known after apply)
      [32m+[0m[0m private_dns          = (known after apply)
      [32m+[0m[0m private_ip           = (known after apply)
      [32m+[0m[0m public_dns           = (known after apply)
      [32m+[0m[0m public_ip            = (known after apply)
      [32m+[0m[0m public_ipv4_pool     = (known after apply)
      [32m+[0m[0m tags                 = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all             = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m vpc                  = (known after apply)
    }

[1m  # module.vpc.aws_internet_gateway.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_internet_gateway" "this" {
      [32m+[0m[0m arn      = (known after apply)
      [32m+[0m[0m id       = (known after apply)
      [32m+[0m[0m owner_id = (known after apply)
      [32m+[0m[0m tags     = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m vpc_id   = (known after apply)
    }

[1m  # module.vpc.aws_nat_gateway.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_nat_gateway" "this" {
      [32m+[0m[0m allocation_id                      = (known after apply)
      [32m+[0m[0m association_id                     = (known after apply)
      [32m+[0m[0m connectivity_type                  = "public"
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m network_interface_id               = (known after apply)
      [32m+[0m[0m private_ip                         = (known after apply)
      [32m+[0m[0m public_ip                          = (known after apply)
      [32m+[0m[0m secondary_private_ip_address_count = (known after apply)
      [32m+[0m[0m secondary_private_ip_addresses     = (known after apply)
      [32m+[0m[0m subnet_id                          = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
    }

[1m  # module.vpc.aws_route.private_nat_gateway[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route" "private_nat_gateway" {
      [32m+[0m[0m destination_cidr_block = "0.0.0.0/0"
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_id            = (known after apply)
      [32m+[0m[0m instance_owner_id      = (known after apply)
      [32m+[0m[0m nat_gateway_id         = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m origin                 = (known after apply)
      [32m+[0m[0m route_table_id         = (known after apply)
      [32m+[0m[0m state                  = (known after apply)

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
        }
    }

[1m  # module.vpc.aws_route.public_internet_gateway[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route" "public_internet_gateway" {
      [32m+[0m[0m destination_cidr_block = "0.0.0.0/0"
      [32m+[0m[0m gateway_id             = (known after apply)
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_id            = (known after apply)
      [32m+[0m[0m instance_owner_id      = (known after apply)
      [32m+[0m[0m network_interface_id   = (known after apply)
      [32m+[0m[0m origin                 = (known after apply)
      [32m+[0m[0m route_table_id         = (known after apply)
      [32m+[0m[0m state                  = (known after apply)

      [32m+[0m[0m timeouts {
          [32m+[0m[0m create = "5m"
        }
    }

[1m  # module.vpc.aws_route_table.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "private" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table" "public" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m owner_id         = (known after apply)
      [32m+[0m[0m propagating_vgws = (known after apply)
      [32m+[0m[0m route            = (known after apply)
      [32m+[0m[0m tags             = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all         = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m vpc_id           = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.database[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "database" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.database[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "database" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.database[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "database" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.private[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "private" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[1][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_route_table_association.public[2][0m will be created
[0m  [32m+[0m[0m resource "aws_route_table_association" "public" {
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m route_table_id = (known after apply)
      [32m+[0m[0m subnet_id      = (known after apply)
    }

[1m  # module.vpc.aws_subnet.database[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "database" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.8.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.database[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "database" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.9.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.database[2][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "database" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.10.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.0.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment"                     = "test"
          [32m+[0m[0m "GithubOrg"                       = "clouddrove"
          [32m+[0m[0m "GithubRepo"                      = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                            = "helm-addons"
          [32m+[0m[0m "kubernetes.io/role/internal-elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment"                     = "test"
          [32m+[0m[0m "GithubOrg"                       = "clouddrove"
          [32m+[0m[0m "GithubRepo"                      = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                            = "helm-addons"
          [32m+[0m[0m "kubernetes.io/role/internal-elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.1.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment"                     = "test"
          [32m+[0m[0m "GithubOrg"                       = "clouddrove"
          [32m+[0m[0m "GithubRepo"                      = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                            = "helm-addons"
          [32m+[0m[0m "kubernetes.io/role/internal-elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment"                     = "test"
          [32m+[0m[0m "GithubOrg"                       = "clouddrove"
          [32m+[0m[0m "GithubRepo"                      = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                            = "helm-addons"
          [32m+[0m[0m "kubernetes.io/role/internal-elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.private[2][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "private" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.2.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment"                     = "test"
          [32m+[0m[0m "GithubOrg"                       = "clouddrove"
          [32m+[0m[0m "GithubRepo"                      = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                            = "helm-addons"
          [32m+[0m[0m "kubernetes.io/role/internal-elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment"                     = "test"
          [32m+[0m[0m "GithubOrg"                       = "clouddrove"
          [32m+[0m[0m "GithubRepo"                      = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                            = "helm-addons"
          [32m+[0m[0m "kubernetes.io/role/internal-elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[0][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1a"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.4.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment"            = "test"
          [32m+[0m[0m "GithubOrg"              = "clouddrove"
          [32m+[0m[0m "GithubRepo"             = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                   = "helm-addons"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment"            = "test"
          [32m+[0m[0m "GithubOrg"              = "clouddrove"
          [32m+[0m[0m "GithubRepo"             = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                   = "helm-addons"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[1][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1b"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.5.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment"            = "test"
          [32m+[0m[0m "GithubOrg"              = "clouddrove"
          [32m+[0m[0m "GithubRepo"             = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                   = "helm-addons"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment"            = "test"
          [32m+[0m[0m "GithubOrg"              = "clouddrove"
          [32m+[0m[0m "GithubRepo"             = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                   = "helm-addons"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_subnet.public[2][0m will be created
[0m  [32m+[0m[0m resource "aws_subnet" "public" {
      [32m+[0m[0m arn                                            = (known after apply)
      [32m+[0m[0m assign_ipv6_address_on_creation                = false
      [32m+[0m[0m availability_zone                              = "us-east-1c"
      [32m+[0m[0m availability_zone_id                           = (known after apply)
      [32m+[0m[0m cidr_block                                     = "10.0.6.0/24"
      [32m+[0m[0m enable_dns64                                   = false
      [32m+[0m[0m enable_resource_name_dns_a_record_on_launch    = false
      [32m+[0m[0m enable_resource_name_dns_aaaa_record_on_launch = false
      [32m+[0m[0m id                                             = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_association_id                 = (known after apply)
      [32m+[0m[0m ipv6_native                                    = false
      [32m+[0m[0m map_public_ip_on_launch                        = false
      [32m+[0m[0m owner_id                                       = (known after apply)
      [32m+[0m[0m private_dns_hostname_type_on_launch            = (known after apply)
      [32m+[0m[0m tags                                           = {
          [32m+[0m[0m "Environment"            = "test"
          [32m+[0m[0m "GithubOrg"              = "clouddrove"
          [32m+[0m[0m "GithubRepo"             = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                   = "helm-addons"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m tags_all                                       = {
          [32m+[0m[0m "Environment"            = "test"
          [32m+[0m[0m "GithubOrg"              = "clouddrove"
          [32m+[0m[0m "GithubRepo"             = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                   = "helm-addons"
          [32m+[0m[0m "kubernetes.io/role/elb" = "1"
        }
      [32m+[0m[0m vpc_id                                         = (known after apply)
    }

[1m  # module.vpc.aws_vpc.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_vpc" "this" {
      [32m+[0m[0m arn                                  = (known after apply)
      [32m+[0m[0m cidr_block                           = "10.0.0.0/16"
      [32m+[0m[0m default_network_acl_id               = (known after apply)
      [32m+[0m[0m default_route_table_id               = (known after apply)
      [32m+[0m[0m default_security_group_id            = (known after apply)
      [32m+[0m[0m dhcp_options_id                      = (known after apply)
      [32m+[0m[0m enable_dns_hostnames                 = true
      [32m+[0m[0m enable_dns_support                   = true
      [32m+[0m[0m enable_network_address_usage_metrics = (known after apply)
      [32m+[0m[0m id                                   = (known after apply)
      [32m+[0m[0m instance_tenancy                     = "default"
      [32m+[0m[0m ipv6_association_id                  = (known after apply)
      [32m+[0m[0m ipv6_cidr_block                      = (known after apply)
      [32m+[0m[0m ipv6_cidr_block_network_border_group = (known after apply)
      [32m+[0m[0m main_route_table_id                  = (known after apply)
      [32m+[0m[0m owner_id                             = (known after apply)
      [32m+[0m[0m tags                                 = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all                             = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
    }

[1m  # module.vpc_cni_irsa.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id   = (known after apply)
      [32m+[0m[0m json = (known after apply)

      [32m+[0m[0m statement {
          [32m+[0m[0m actions = [
              [32m+[0m[0m "sts:AssumeRoleWithWebIdentity",
            ]
          [32m+[0m[0m effect  = "Allow"

          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "sts.amazonaws.com",
                ]
              [32m+[0m[0m variable = (known after apply)
            }
          [32m+[0m[0m condition {
              [32m+[0m[0m test     = "StringEquals"
              [32m+[0m[0m values   = [
                  [32m+[0m[0m "system:serviceaccount:kube-system:aws-node",
                ]
              [32m+[0m[0m variable = (known after apply)
            }

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "Federated"
            }
        }
    }

[1m  # module.vpc_cni_irsa.aws_iam_policy.vpc_cni[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "vpc_cni" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m description = "Provides the Amazon VPC CNI Plugin (amazon-vpc-cni-k8s) the permissions it requires to modify the IPv4/IPv6 address configuration on your EKS worker nodes"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = (known after apply)
      [32m+[0m[0m name_prefix = "AmazonEKS_CNI_Policy-"
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ec2:DescribeTags",
                          [32m+[0m[0m "ec2:DescribeNetworkInterfaces",
                          [32m+[0m[0m "ec2:DescribeInstances",
                          [32m+[0m[0m "ec2:DescribeInstanceTypes",
                          [32m+[0m[0m "ec2:AssignIpv6Addresses",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                      [32m+[0m[0m Sid      = "IPV6"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = "ec2:CreateTags"
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:ec2:*:*:network-interface/*"
                      [32m+[0m[0m Sid      = "CreateTags"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags        = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all    = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
    }

[1m  # module.vpc_cni_irsa.aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = (known after apply)
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "VPC-CNI-IRSA"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.vpc_cni_irsa.aws_iam_role_policy_attachment.vpc_cni[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "vpc_cni" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.addons.module.prometheus_cloudwatch_exporter[0].aws_iam_policy.policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "policy" {
      [32m+[0m[0m arn         = (known after apply)
      [32m+[0m[0m description = "IAM Policy used by prometheus-cloudwatch-exporter-helm-addons-cluster IAM Role"
      [32m+[0m[0m id          = (known after apply)
      [32m+[0m[0m name        = "prometheus-cloudwatch-exporter-helm-addons-cluster"
      [32m+[0m[0m name_prefix = (known after apply)
      [32m+[0m[0m path        = "/"
      [32m+[0m[0m policy      = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "cloudwatch:ListMetrics",
                          [32m+[0m[0m "cloudwatch:GetMetricStatistics",
                          [32m+[0m[0m "cloudwatch:GetMetricData",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                      [32m+[0m[0m Sid      = "AllowCloudwatch"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "tag:GetResources",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                      [32m+[0m[0m Sid      = "AllowResourceTagging"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id   = (known after apply)
      [32m+[0m[0m tags_all    = (known after apply)
    }

[1m  # module.addons.module.prometheus_cloudwatch_exporter[0].kubectl_manifest.secret_manifest[0][0m will be created
[0m  [32m+[0m[0m resource "kubectl_manifest" "secret_manifest" {
      [32m+[0m[0m api_version             = "v1"
      [32m+[0m[0m apply_only              = false
      [32m+[0m[0m force_conflicts         = false
      [32m+[0m[0m force_new               = false
      [32m+[0m[0m id                      = (known after apply)
      [32m+[0m[0m kind                    = "Secret"
      [32m+[0m[0m live_manifest_incluster = (sensitive value)
      [32m+[0m[0m live_uid                = (known after apply)
      [32m+[0m[0m name                    = "nilesh"
      [32m+[0m[0m namespace               = "monitoring"
      [32m+[0m[0m server_side_apply       = false
      [32m+[0m[0m uid                     = (known after apply)
      [32m+[0m[0m validate_schema         = true
      [32m+[0m[0m wait_for_rollout        = true
      [32m+[0m[0m yaml_body               = (sensitive value)
      [32m+[0m[0m yaml_body_parsed        = <<-EOT
            apiVersion: v1
            data: (sensitive value)
            kind: Secret
            metadata:
              name: nilesh
              namespace: monitoring
            type: Opaque
        EOT
      [32m+[0m[0m yaml_incluster          = (sensitive value)
    }

[1m  # module.addons.module.prometheus_cloudwatch_exporter[0].kubernetes_namespace.prometheus_cloudwatch_exporter_namespace[0m will be created
[0m  [32m+[0m[0m resource "kubernetes_namespace" "prometheus_cloudwatch_exporter_namespace" {
      [32m+[0m[0m id                               = (known after apply)
      [32m+[0m[0m wait_for_default_service_account = false

      [32m+[0m[0m metadata {
          [32m+[0m[0m generation       = (known after apply)
          [32m+[0m[0m name             = "monitoring"
          [32m+[0m[0m resource_version = (known after apply)
          [32m+[0m[0m uid              = (known after apply)
        }
    }

[1m  # module.eks.module.eks_managed_node_group["application"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = "AL2_x86_64"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "SPOT"
      [32m+[0m[0m cluster_name           = "helm-addons-cluster"
      [32m+[0m[0m disk_size              = 20
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t3.medium",
        ]
      [32m+[0m[0m node_group_name        = "application"
      [32m+[0m[0m node_group_name_prefix = (known after apply)
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment"                                = "test"
          [32m+[0m[0m "GithubOrg"                                  = "clouddrove"
          [32m+[0m[0m "GithubRepo"                                 = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                                       = "application"
          [32m+[0m[0m "karpenter.sh/discovery/helm-addons-cluster" = "helm-addons-cluster"
          [32m+[0m[0m "kubernetes.io/cluster/helm-addons-cluster"  = "shared"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment"                                = "test"
          [32m+[0m[0m "GithubOrg"                                  = "clouddrove"
          [32m+[0m[0m "GithubRepo"                                 = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                                       = "application"
          [32m+[0m[0m "karpenter.sh/discovery/helm-addons-cluster" = "helm-addons-cluster"
          [32m+[0m[0m "kubernetes.io/cluster/helm-addons-cluster"  = "shared"
        }
      [32m+[0m[0m version                = "1.29"

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 0
          [32m+[0m[0m max_size     = 1
          [32m+[0m[0m min_size     = 0
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable_percentage = 33
        }
    }

[1m  # module.eks.module.eks_managed_node_group["application"].aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "EKS managed node group IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "application-eks-node-group-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment"                                = "test"
          [32m+[0m[0m "GithubOrg"                                  = "clouddrove"
          [32m+[0m[0m "GithubRepo"                                 = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                                       = "helm-addons"
          [32m+[0m[0m "karpenter.sh/discovery/helm-addons-cluster" = "helm-addons-cluster"
          [32m+[0m[0m "kubernetes.io/cluster/helm-addons-cluster"  = "shared"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment"                                = "test"
          [32m+[0m[0m "GithubOrg"                                  = "clouddrove"
          [32m+[0m[0m "GithubRepo"                                 = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                                       = "helm-addons"
          [32m+[0m[0m "karpenter.sh/discovery/helm-addons-cluster" = "helm-addons-cluster"
          [32m+[0m[0m "kubernetes.io/cluster/helm-addons-cluster"  = "shared"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["application"].aws_iam_role_policy_attachment.additional["policy_arn"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "additional" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["application"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["application"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["application"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["critical"].aws_eks_node_group.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_eks_node_group" "this" {
      [32m+[0m[0m ami_type               = "AL2_x86_64"
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m capacity_type          = "ON_DEMAND"
      [32m+[0m[0m cluster_name           = "helm-addons-cluster"
      [32m+[0m[0m disk_size              = 20
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m instance_types         = [
          [32m+[0m[0m "t3.medium",
        ]
      [32m+[0m[0m node_group_name        = "critical"
      [32m+[0m[0m node_group_name_prefix = (known after apply)
      [32m+[0m[0m node_role_arn          = (known after apply)
      [32m+[0m[0m release_version        = (known after apply)
      [32m+[0m[0m resources              = (known after apply)
      [32m+[0m[0m status                 = (known after apply)
      [32m+[0m[0m subnet_ids             = (known after apply)
      [32m+[0m[0m tags                   = {
          [32m+[0m[0m "Environment"                                = "test"
          [32m+[0m[0m "GithubOrg"                                  = "clouddrove"
          [32m+[0m[0m "GithubRepo"                                 = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                                       = "critical"
          [32m+[0m[0m "karpenter.sh/discovery/helm-addons-cluster" = "helm-addons-cluster"
          [32m+[0m[0m "kubernetes.io/cluster/helm-addons-cluster"  = "shared"
        }
      [32m+[0m[0m tags_all               = {
          [32m+[0m[0m "Environment"                                = "test"
          [32m+[0m[0m "GithubOrg"                                  = "clouddrove"
          [32m+[0m[0m "GithubRepo"                                 = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                                       = "critical"
          [32m+[0m[0m "karpenter.sh/discovery/helm-addons-cluster" = "helm-addons-cluster"
          [32m+[0m[0m "kubernetes.io/cluster/helm-addons-cluster"  = "shared"
        }
      [32m+[0m[0m version                = "1.29"

      [32m+[0m[0m scaling_config {
          [32m+[0m[0m desired_size = 1
          [32m+[0m[0m max_size     = 2
          [32m+[0m[0m min_size     = 1
        }

      [32m+[0m[0m timeouts {}

      [32m+[0m[0m update_config {
          [32m+[0m[0m max_unavailable_percentage = 33
        }
    }

[1m  # module.eks.module.eks_managed_node_group["critical"].aws_iam_role.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "this" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "ec2.amazonaws.com"
                        }
                      [32m+[0m[0m Sid       = "EKSNodeAssumeRole"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m description           = "EKS managed node group IAM role"
      [32m+[0m[0m force_detach_policies = true
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = "critical-eks-node-group-"
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment"                                = "test"
          [32m+[0m[0m "GithubOrg"                                  = "clouddrove"
          [32m+[0m[0m "GithubRepo"                                 = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                                       = "helm-addons"
          [32m+[0m[0m "karpenter.sh/discovery/helm-addons-cluster" = "helm-addons-cluster"
          [32m+[0m[0m "kubernetes.io/cluster/helm-addons-cluster"  = "shared"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment"                                = "test"
          [32m+[0m[0m "GithubOrg"                                  = "clouddrove"
          [32m+[0m[0m "GithubRepo"                                 = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"                                       = "helm-addons"
          [32m+[0m[0m "karpenter.sh/discovery/helm-addons-cluster" = "helm-addons-cluster"
          [32m+[0m[0m "kubernetes.io/cluster/helm-addons-cluster"  = "shared"
        }
      [32m+[0m[0m unique_id             = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["critical"].aws_iam_role_policy_attachment.additional["policy_arn"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "additional" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["critical"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["critical"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.eks_managed_node_group["critical"].aws_iam_role_policy_attachment.this["arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"][0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "this" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # module.eks.module.kms.data.aws_iam_policy_document.this[0][0m will be read during apply
  # (config refers to values not yet known)
[0m [36m<=[0m[0m data "aws_iam_policy_document" "this" {
      [32m+[0m[0m id                        = (known after apply)
      [32m+[0m[0m json                      = (known after apply)
      [32m+[0m[0m override_policy_documents = []
      [32m+[0m[0m source_policy_documents   = []

      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:CancelKeyDeletion",
              [32m+[0m[0m "kms:Create*",
              [32m+[0m[0m "kms:Delete*",
              [32m+[0m[0m "kms:Describe*",
              [32m+[0m[0m "kms:Disable*",
              [32m+[0m[0m "kms:Enable*",
              [32m+[0m[0m "kms:Get*",
              [32m+[0m[0m "kms:List*",
              [32m+[0m[0m "kms:Put*",
              [32m+[0m[0m "kms:Revoke*",
              [32m+[0m[0m "kms:ScheduleKeyDeletion",
              [32m+[0m[0m "kms:TagResource",
              [32m+[0m[0m "kms:UntagResource",
              [32m+[0m[0m "kms:Update*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyAdministration"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m "arn:aws:iam::924144197303:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_AdministratorAccess_3b5b668e6e5741c8",
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
      [32m+[0m[0m statement {
          [32m+[0m[0m actions   = [
              [32m+[0m[0m "kms:Decrypt",
              [32m+[0m[0m "kms:DescribeKey",
              [32m+[0m[0m "kms:Encrypt",
              [32m+[0m[0m "kms:GenerateDataKey*",
              [32m+[0m[0m "kms:ReEncrypt*",
            ]
          [32m+[0m[0m resources = [
              [32m+[0m[0m "*",
            ]
          [32m+[0m[0m sid       = "KeyUsage"

          [32m+[0m[0m principals {
              [32m+[0m[0m identifiers = [
                  [32m+[0m[0m (known after apply),
                ]
              [32m+[0m[0m type        = "AWS"
            }
        }
    }

[1m  # module.eks.module.kms.aws_kms_alias.this["cluster"][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_alias" "this" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m name           = "alias/eks/helm-addons-cluster"
      [32m+[0m[0m name_prefix    = (known after apply)
      [32m+[0m[0m target_key_arn = (known after apply)
      [32m+[0m[0m target_key_id  = (known after apply)
    }

[1m  # module.eks.module.kms.aws_kms_key.this[0][0m will be created
[0m  [32m+[0m[0m resource "aws_kms_key" "this" {
      [32m+[0m[0m arn                                = (known after apply)
      [32m+[0m[0m bypass_policy_lockout_safety_check = false
      [32m+[0m[0m customer_master_key_spec           = "SYMMETRIC_DEFAULT"
      [32m+[0m[0m description                        = "helm-addons-cluster cluster encryption key"
      [32m+[0m[0m enable_key_rotation                = true
      [32m+[0m[0m id                                 = (known after apply)
      [32m+[0m[0m is_enabled                         = true
      [32m+[0m[0m key_id                             = (known after apply)
      [32m+[0m[0m key_usage                          = "ENCRYPT_DECRYPT"
      [32m+[0m[0m multi_region                       = false
      [32m+[0m[0m policy                             = (known after apply)
      [32m+[0m[0m tags                               = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
      [32m+[0m[0m tags_all                           = {
          [32m+[0m[0m "Environment" = "test"
          [32m+[0m[0m "GithubOrg"   = "clouddrove"
          [32m+[0m[0m "GithubRepo"  = "terraform-helm-eks-addons"
          [32m+[0m[0m "Name"        = "helm-addons"
        }
    }

[1m  # module.addons.module.prometheus_cloudwatch_exporter[0].module.prometheus_cloudwatch_exporter_secret[0].helm_release.addon[0][0m will be created
[0m  [32m+[0m[0m resource "helm_release" "addon" {
      [32m+[0m[0m atomic                     = true
      [32m+[0m[0m chart                      = "prometheus-cloudwatch-exporter"
      [32m+[0m[0m cleanup_on_fail            = false
      [32m+[0m[0m create_namespace           = true
      [32m+[0m[0m dependency_update          = false
      [32m+[0m[0m description                = "Prometheus Cloudwatch-Exporter helm Chart deployment configuration"
      [32m+[0m[0m disable_crd_hooks          = false
      [32m+[0m[0m disable_openapi_validation = false
      [32m+[0m[0m disable_webhooks           = false
      [32m+[0m[0m force_update               = false
      [32m+[0m[0m id                         = (known after apply)
      [32m+[0m[0m lint                       = false
      [32m+[0m[0m manifest                   = (known after apply)
      [32m+[0m[0m max_history                = 0
      [32m+[0m[0m metadata                   = (known after apply)
      [32m+[0m[0m name                       = "prometheus-cloudwatch-exporter"
      [32m+[0m[0m namespace                  = "monitoring"
      [32m+[0m[0m pass_credentials           = false
      [32m+[0m[0m recreate_pods              = false
      [32m+[0m[0m render_subchart_notes      = true
      [32m+[0m[0m replace                    = false
      [32m+[0m[0m repository                 = "https://prometheus-community.github.io/helm-charts"
      [32m+[0m[0m reset_values               = false
      [32m+[0m[0m reuse_values               = false
      [32m+[0m[0m skip_crds                  = false
      [32m+[0m[0m status                     = "deployed"
      [32m+[0m[0m timeout                    = 600
      [32m+[0m[0m values                     = [
          [32m+[0m[0m <<-EOT
                ## Node affinity for particular node in which labels key is "Infra-Services" and value is "true"
                
                affinity:
                  nodeAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                      nodeSelectorTerms:
                      - matchExpressions:
                        - key: "eks.amazonaws.com/nodegroup"
                          operator: In
                          values:
                          - "critical"
                
                ## Using limits and requests
                resources:
                  limits:
                    cpu: 300m
                    memory: 250Mi
                  requests:
                    cpu: 50m
                    memory: 150Mi
                
                # Configuration is rendered with `tpl` function, therefore you can use any Helm variables and/or templates here
                config: |-
                  # This is the default configuration for prometheus-cloudwatch-exporter
                  region: us-east-1
                  metrics:
                  - aws_dimensions:
                    - InstanceId
                    aws_metric_name: CPUUtilization
                    aws_namespace: AWS/EC2
                    aws_statistics:
                    - Average
                    aws_tag_select:
                      resource_type_selection: ec2:instance
                      resource_id_dimension: InstanceId
                  - aws_dimensions:
                    - InstanceId
                    aws_metric_name: NetworkIn
                    aws_namespace: AWS/EC2
                    aws_statistics:
                    - Average
                  - aws_dimensions:
                    - InstanceId
                    aws_metric_name: NetworkOut
                    aws_namespace: AWS/EC2
                    aws_statistics:
                    - Average
                  - aws_dimensions:
                    - InstanceId
                    aws_metric_name: NetworkPacketsIn
                    aws_namespace: AWS/EC2
                    aws_statistics:
                    - Average
                  - aws_dimensions:
                    - InstanceId
                    aws_metric_name: NetworkPacketsOut
                    aws_namespace: AWS/EC2
                    aws_statistics:
                    - Average
                  - aws_dimensions:
                    - InstanceId
                    aws_metric_name: DiskWriteBytes
                    aws_namespace: AWS/EC2
                    aws_statistics:
                    - Average
                  - aws_dimensions:
                    - InstanceId
                    aws_metric_name: DiskReadBytes
                    aws_namespace: AWS/EC2
                    aws_statistics:
                    - Average
                  - aws_dimensions:
                    - InstanceId
                    aws_metric_name: CPUCreditBalance
                    aws_namespace: AWS/EC2
                    aws_statistics:
                    - Average
                  - aws_dimensions:
                    - InstanceId
                    aws_metric_name: CPUCreditUsage
                    aws_namespace: AWS/EC2
                    aws_statistics:
                    - Average
                  - aws_dimensions:
                    - InstanceId
                    aws_metric_name: StatusCheckFailed
                    aws_namespace: AWS/EC2
                    aws_statistics:
                    - Sum
                  - aws_dimensions:
                    - InstanceId
                    aws_metric_name: StatusCheckFailed_Instance
                    aws_namespace: AWS/EC2
                    aws_statistics:
                    - Sum
                  - aws_dimensions:
                    - InstanceId
                    aws_metric_name: StatusCheckFailed_System
                    aws_namespace: AWS/EC2
                    aws_statistics:
                    - Sum
            EOT,
        ]
      [32m+[0m[0m verify                     = false
      [32m+[0m[0m version                    = "0.25.2"
      [32m+[0m[0m wait                       = true
      [32m+[0m[0m wait_for_jobs              = false

      [32m+[0m[0m postrender {}

      [32m+[0m[0m set {
          [32m+[0m[0m name  = "aws.secret.name"
          [32m+[0m[0m value = "aws"
        }
    }

[1mPlan:[0m 78 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m cluster_name             = "helm-addons-cluster"
  [32m+[0m[0m istio-ingress            = "Istio does not support the installation of istio-helmchart in a namespace other than istio-system. We have provided a namespace feature in case Istio-helmchart maintainers fix this issue."
  [32m+[0m[0m region                   = "us-east-1"
  [32m+[0m[0m update_kubeconfig        = "aws eks update-kubeconfig --name helm-addons-cluster --region us-east-1"
  [32m+[0m[0m velero_post_installation = <<-EOT
        Once velero server is up and running you need the client before you can use it - 
            1. wget https://github.com/vmware-tanzu/velero/releases/download/v1.11.1/velero-v1.11.1-darwin-amd64.tar.gz 
            2. tar -xvf velero-v1.11.1-darwin-amd64.tar.gz -C velero-client
    EOT
[33m╷[0m[0m
[33m│[0m [0m[1m[33mWarning: [0m[0m[1mArgument is deprecated[0m
[33m│[0m [0m
[33m│[0m [0m[0m  with module.eks.aws_eks_addon.before_compute["vpc-cni"],
[33m│[0m [0m  on .terraform/modules/eks/main.tf line 420, in resource "aws_eks_addon" "before_compute":
[33m│[0m [0m 420:   resolve_conflicts        = [4mtry(each.value.resolve_conflicts, "OVERWRITE")[0m[0m
[33m│[0m [0m
[33m│[0m [0mThe "resolve_conflicts" attribute can't be set to "PRESERVE" on initial resource creation. Use "resolve_conflicts_on_create" and/or
[33m│[0m [0m"resolve_conflicts_on_update" instead
[33m╵[0m[0m
[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
